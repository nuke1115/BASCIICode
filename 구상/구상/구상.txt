이름 : BASCIICode <= Brainfuck이라는 난해한 프로그래밍 언어에서 이름을 따왔다
확장자 : .BASCIICode

문법: 기본적으로 Brainfuck의 문법을 따라간다

작동 방식: 파일의 코드를 읽어온다
명령어 인덱스를 코드 하나를 실행시킬때마다 +1 씩 옮긴다
명령어 인덱스가 가리키고 있는 셀의 코드를 읽고, 읽은 코드의 아스키코드 값을 10으로 나눈 나머지의 결과에 따라 함수를 호출한다

각 값에 대응하는 명령어는 다음과 같다

0 => 프로그램 종료
1 => 값 인덱스를 왼쪽으로 1 옮긴다
2 => 값 인덱스를 오른쪽으로 1 옮긴다
3 => 값 인덱스가 가리키고 있는 셀의 값을 1 증가시킨다
4 => 값 인덱스가 가리키고 있는 셀의 값을 1 감소시킨다
5 => 값 인덱스가 가리키고 있는 셀의 값을 아스키코드의 형태로 출력한다
6 => 값 인덱스가 가리키고 있는 셀에 아스키코드의 형태로 값을 입력한다

7,8는 루프문 관련 명령어다
7 => 루프스텍에 명령어 인덱스가 가리키고 있는 셀의 번호를 입력한다
8 => 만약 값 인덱스가 가리키고 있는 셀의 값이 0이라면 루프스텍의 가장 위의 값을 제거하고, 루프스텍에서 값을 꺼내와 명령어 인덱스를 그 값에서 +1한만큼의 위치로 이동시킨다

9 => 값 인덱스가 가리키고 있는 셀의 값을 정수 형태로 출력한다

구조:
명령어 배열&명령어 인덱스
값 배열&값 인덱스
루프스텍
배열과 인덱스들은 interpreter 클래스에 포함되있다

==========
인터프리터 형식의 esolang

코드 읽어오는것 <= 완료
코드를 읽고 아스키 코드에 맞는 문자를 명령어 배열에 할당 해주기 ,  인덱스가 움직이는 최대값에 맞춰서 값 배열 할당하기 <= tokenizer <= 완료
[0=>E 1=>> 2=>< 3=>+ 4=>- 5=>A 6=>S =>  7 => [ 8=> ] 9 =>D]
명령어 테이블 <= commandTable <= 완료
명령어 배열을 읽고 명령어 테이블에 있는 명령어를 실행하는것 <= executer <= 완료
main.cpp


=====
주제:간단한 형태의 난해한 프로그래밍 언어 만들어보기
동기:시험기간중에 갑자기 난해한 프로그래밍 언어를 만들고싶다는 생각이 들었는데, 시험이 끝나고 방학 시작하기 전에 만들어보고자 하여 해보게 되었다(임시)
배경지식: 인터프리터와 관련한것 , 난해한 프로그래밍 언어와 관련한것
과정:만드는 과정/오류 해결 <= 사진과 함께
결과:이 언어로 만든 간단한 프로그램 몇개와 설명 <= 깃허브 링크도 첨부
소감:
자료출처:

=========
목적:
=========
인터프리터란?
