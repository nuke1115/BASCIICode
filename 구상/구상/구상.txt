이름 : BASCIICode <= Brainfuck이라는 난해한 프로그래밍 언어에서 이름을 따왔다
확장자 : .BASCIICode

문법: 기본적으로 Brainfuck의 문법을 따라간다

작동 방식: 파일의 코드를 읽어온다
명령어 인덱스를 코드 하나를 실행시킬때마다 +1 씩 옮긴다
명령어 인덱스가 가리키고 있는 셀의 코드를 읽고, 읽은 코드의 아스키코드 값을 10으로 나눈 나머지의 결과에 따라 함수를 호출한다

각 값에 대응하는 명령어는 다음과 같다

0 => 프로그램 종료
1 => 값 인덱스를 왼쪽으로 1 옮긴다
2 => 값 인덱스를 오른쪽으로 1 옮긴다
3 => 값 인덱스가 가리키고 있는 셀의 값을 1 증가시킨다
4 => 값 인덱스가 가리키고 있는 셀의 값을 1 감소시킨다
5 => 값 인덱스가 가리키고 있는 셀의 값을 아스키코드의 형태로 출력한다
6 => 값 인덱스가 가리키고 있는 셀에 아스키코드의 형태로 값을 입력한다

7,8는 루프문 관련 명령어다
7 => 만약 값 포인터가 가리키고 있는 셀의 값이 0이면, 루프 맵에서 현재 루프의 끝에 해당하는 위치값을 꺼내와서 명령어 인덱스를 해당 위치로 이동하고, 아니라면 그냥 지나간다.
8 => 만약 값 포인터가 가리키고 있는 셀의 값이 0이 아니면, 루프 맵에서 현재 루프의 시작에 해당하는 위치값을 꺼내와서 명령어 인덱스를 해당 위치로 이동하고, 아니라면 그냥 지나간다.

9 => 값 인덱스가 가리키고 있는 셀의 값을 정수 형태로 출력한다
		
구조:
명령어 배열&명령어 인덱스
값 배열&값 인덱스
루프 맵
배열과 인덱스, 맵들은 interpreter 클래스에 포함되있다





[]

[[[]]]
[[][]]
==========
인터프리터 형식의 esolang

코드 읽어오는것 <= 완료
코드를 읽고 아스키 코드에 맞는 문자를 명령어 배열에 할당 해주기 ,  인덱스가 움직이는 최대값에 맞춰서 값 배열 할당하기 <= parser <= 완료
[0=>E 1=>> 2=>< 3=>+ 4=>- 5=>A 6=>S =>  7 => [ 8=> ] 9 =>D]
명령어 테이블 <= commandTable <= 완료
명령어 배열을 읽고 명령어 테이블에 있는 명령어를 실행하는것 <= executer <= 완료
main.cpp

TODO input함수 값 입력 오류 수정
=====
주제:간단한 형태의 난해한 프로그래밍 언어 만들어보기
동기:시험기간중에 갑자기 난해한 프로그래밍 언어를 만들고싶다는 생각이 들었는데, 시험이 끝나고 방학 시작하기 전에 만들어보고자 하여 해보게 되었다(임시)
배경지식: 인터프리터와 관련한것 , 난해한 프로그래밍 언어와 관련한것
과정:만드는 과정/오류 해결 <= 사진과 함께
결과:이 언어로 만든 간단한 프로그램 몇개와 설명 <= 깃허브 링크도 첨부
소감:
자료출처:

=========
동기:인터넷을 돌아다니던 중에 난해한 프로그래밍 언어에 대해 다루는 글을 보았다.
글을 다 나니 직접 만들어보는것도 괜찮은 경험일거라 생각하여,
현제 만들어진 언어들중 가장 간단하며 잘 알려진 언어인 Brainfuck이라는 언어에 약간의 변형을 가하여 만들어보기로 하였다



/집에서 무언가를 제작해보는것을 즐겨하는데, 다음으로 만들것에 대한 주제를 찾기 위해 인터넷을 찾아보던중 난해한 프로그래밍 언어에 대해 다룬 글을 보았다.
그 글을 보고 나니 쓰기 편하게 만드는게 아닌, 오히려 어렵게 만드는 난해한 프로그래밍 언어에 대해 관심이 생겼고,
직접 만들어보는것도 괜찮은 경험이라 생각하여, 현재 만들어진 난해한 프로그래밍 언어중
간단한 구조인 Brainfuck이라는 언어를 기반으로 약간의 변형을 가해 새로운 난해한 프로그래밍 언어를 만들어보고자 한다.

=>흐름은 괜찮은데
,사용은 자제하는게 좋아요
불필요한 ,은 빼고
호흡이 긴 문장은 두 개로 쪼개요
그리고 접속사? 라고 해야 하나
~일 것 같다
~라고 생각해서
~했는데 그리고 등등 자제


/평소에 무언가를 만들어보는 것을 즐기는 편이
시험이 끝나서, 다음으로 만들 것의 아이디어를 얻기 위해 인터넷을 찾아보던 중 난해한 프로그래밍 언어에 대해 다룬 글을 보았다.
쓰기 편하기 위해 만드는 것이 아닌, 오히려 쓰기 어렵게 만드는 난해한 프로그래밍 언어에 관해 관심이 생겼고, 직접 만드는 것도 괜찮은 경험일 거라 생각해 다음으로 만들것을 이것으로 정했다.
만들기 위해 더 찾아보던 중 Brainfuck이라는 언어를 찾았고, 간단한 형태라 변형하기 적절할 거라 생각해 이 언어에 약간의 변형을 가해 난해한 프로그래밍 언어를 만들어보게 되었다.

/평소에 무언가를 만들어보는 것을 즐겨한다.
시험이 끝나고 방학까지의 기간 동안 무언가를 만들어 보고자 아이디어를 얻기 위해 인터넷을 찾아보던 중 난해한 프로그래밍 언어에 대해 다룬 글을 보았다. 쓰기 편하기 위해 만드는 것이 아닌, 오히려 쓰기 어렵게 만드는 난해한 프로그래밍 언어는 상당히 흥미로웠다. 이것을 직접 만들어보는 것도 괜찮은 경험일 거라 생각해 자료를 더 찾아보던 중 Brainfuck이라는 언어를 찾았다. 언어의 구조가 상당히 단순해 변형을 가하기 적절할 것이라 판단해 이 언어에 약간의 변형을 가해 새로운 난해한 프로그래밍 언어를 만들어보았다.



목적:난해한 프로그래밍 언어에 대해 탐구해보고, 직접 만들어본다.
=========
난해한 프로그래밍 언어, 튜링 완전성,인터프리터

난해한 프로그래밍 언어:
정의:아이디어나 프로그래밍 언어의 한계를 실험하거나, 단순히 재미를 위해서 만들어진 프로그래밍 언어다.
특징:일반적으로 읽거나 쓰는게 상당히 난해하다.
만들어 지는 언어들의 종류:최소주의(언어에 쓰이는 문자나 명령어를 최소한으로 만든다.) , 새로운 컨셉(기존에 쓰이던 언어의 컨셉을 비틀거나, 완전히 새롭게 창조한다.)
괴상함 (언어의 가독성이나 사용하기 극한으로 어렵게 만들거나, 난해하게 만든다) , 테마 (컴퓨터와는 거리가 멀어보이는 테마를 기반으로 만들어진다)
장난을 위해서 (대부분의 난해한 프로그래밍 언어는 단순이 유머나 장난을 위해서 만들어진다. 하지만 그중에는 프로그래밍 언어로써의 기능을 갖춘것도 있다)
